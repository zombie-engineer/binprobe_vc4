import os

def get_table_fname_base():
    return 'vc4_scalar_op_table'

def get_table_header_fname():
    return get_table_fname_base() + '.h'

def get_table_source_fname():
    return get_table_fname_base() + '.c'

def init_file(is_header):
    if is_header:
        fname = get_table_header_fname()
    else:
        fname = get_table_source_fname()

    if os.path.exists(fname):
        os.remove(fname)
    f = open(fname, 'x')
    f.write("/* autogenerated file */\n")
    return f

def gen_table_header(t, f):
    f.write('#pragma once\n')
    for i, opname in t:
        f.write('#define VC4_SCALAR_OP_{} {}\n'.format(opname.upper(), i))
    f.write('const struct vc4_scalar_op *vc4_get_scalar_op(int op_idx);\n')

def gen_table_source(t, f):
    f.write('#include "{}"\n\n'.format("vc4_scalar_op.h"))

    for i, opname in t:
        f.write('VC4_SCALAR_OP_FNS({});\n'.format(opname))
    f.write('\n')

    f.write('static struct vc4_scalar_op vc4_scalar_op_table[] = {\n')
    entries = []
    for i, opname in t:
        entries.append('\tVC4_SCALAR_OP_TABLE_ENTRY({})'.format(opname))
    f.write(',\n'.join(entries))
    f.write('\n};\n\n')

    f.write('const struct vc4_scalar_op *vc4_get_scalar_op(int op_idx)\n')
    f.write('{\n\treturn &vc4_scalar_op_table[op_idx];\n}\n')

def get_table_from_input():
    table = []
    with open('vc4_scalar_op.in') as f:
        for i, l in enumerate(f.readlines()):
            table.append((i, l.strip()))
    return table

def main():
    t = get_table_from_input()
    gen_table_header(t, init_file(is_header=True))
    gen_table_source(t, init_file(is_header=False))


if __name__ == '__main__':
    main()
