#pragma once
#include <stdint.h>

/* Scalar Binary Arithmetic/Logical Operations */

struct vc4_scalar_op {
	const char *name;
	void (*print)(int, int32_t, int32_t, const char *);
};

#define VC4_SCALAR_OP_PRINT_FN_NAME(__op) vc4_scalar_i_print_ ## __op
#define VC4_SCALAR_OP_PRINT_FN_PROTO(__op) vc4_scalar_i_print_ ## __op

#define VC4_SCALAR_OP_PRINT_FN(__op) \
	void VC4_SCALAR_OP_PRINT_FN_NAME(__op)(int d, int32_t a, int32_t b, const char *cond)

#define VC4_SCALAR_OP_FNS(__op) \
	VC4_SCALAR_OP_PRINT_FN(__op)

#define VC4_SCALAR_OP_TABLE_ENTRY(__op) \
{ \
	.name  = #__op, \
	.print = VC4_SCALAR_OP_PRINT_FN_NAME(__op) \
}

/* Autogenerated include */
#include "vc4_scalar_op_table.h"

#define scalar_op_print(__idx, p0, p1, p2, __condstr) vc4_get_scalar_op(__idx)->print(emul, p0, p1, p2, __condstr)
const char *vc4_scalar_op_get_name(int idx);
